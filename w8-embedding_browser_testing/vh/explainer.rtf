{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww12600\viewh7800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Full page background image explainer \
\
So there are a couple of different ways to do a fullpage background or to make an image stretch from place to place. We\'92re going to look at those today using an image that I have saved on my site. \
\
The way we\'92ve seen this done in the past is usually something where we\'92ve had a really large image that has a percentage width for its, uh, width. The issue with those images is that they can cut off and have to scroll to be seen: \
\
https://thegreatdiscontent.com/interview/omar-j-dorsey\
\
There are other solutions to this, but a lot of the time they\'92ll hijack the scroll function to do their thing: \
\
http://www.nationalgeographic.com/magazine/2016/05/yellowstone-national-parks-elk-migration-map/\
\
So we can take a few different paths to do a full-screen or full-width background image that still would have text as a part of it. \
\
So a common way to try to move text over an image is to fiddle with the margins. Let\'92s do that and also use the z-index to see what we can do: \
\
let\'92s start by putting a class of \'93cover\'94 on that image. We can use that to move it around a bit. \
\
Let\'92s start by pretending we might want to have that h1 over the photo. \
\
.cover \{\
    margin-top: -65px; //moves photo up into header \
    position: relative; //required to have the z-index property work \
    z-index: -10; \
\}\
\
Now that moves the h1 over the photo, but we might want to move it a little bit around depending on what\'92s going on with it. \
\
h1 \{\
    padding-left: 10px;\
    padding-top: 10px;\
\}\
\
The problem with this is that it\'92s dependent vastly on positioning and it breaks down in smaller spaces. \
\
An alternative, of course, is to just photoshop the text onto the photo, but that\'92s bad for accessibility and if the photo gets small, the text gets unrecognizable small. \
\
Let\'92s do a different technique, and bring this in as a background image. We haven\'92t played with this much in CSS, but in old versions of the Web putting a background image (such as a texture) on your site was the absolute coolest. \
\
Anyhow, let\'92s say we want to put a background image on a thing. In this case, we could put a background image on the h1 and see what happens: \
\
h1 \{\
    background: #bd5532; //this sets the initial color in case the image doesn\'92t appear \
    background-image: url('img/wp.png');\
    background-size: 100% auto; //first unit is width, second height \
\}\
\
Well \'85 that was disappointing. Keep in mind that\'92s set on just the h1, so the box that the CSS draws will set itself just there. \
\
We could do this a different way, by setting the h1 inside of a header element and applying the background to the header element: \
\
    <article>\
            <header>\
                <h1>Headline here</h1>\
            </header>\
\
header \{\
    background: #bd5532;\
    background-image: url('img/wp.png');\
    background-size: cover;\
\}\
\
That\'92s not so bad. What if we wanted to add a little padding to the header: \
\
header \{\
    background: #bd5532;\
    background-image: url('img/wp.png');\
    background-size: cover;\
    padding: 2em; \
\}\
\
and then we\'92ll style up the headline a bit and add some padding there: \
\
h1 \{\
    color: white;\
    padding: 1em; \
\}\
\
So what if we want to make this full width or full height? Couple of options. \
\
Right now it\'92s set to be the full width of its containing element. \
\
We have a few different ways to style it: \
\
header \{\
     width: 100%; \
\}\
\
makes it \'85 not change. \
\
header \{\
    width: 100vw; \
\}\
\
makes it 100 percent of the viewport width, but we get a scroll. Why is that? Because it starts drawing where the site logic says it should, from the left area of where it\'92s currently drawn. \
\
Let\'92s comment out a couple of things: first, your 600px media query; second, the parts of the media query other than the nav ul information (nav ul and nav ul li) \
\
Let\'92s also comment out the container css on line 10. \
\
Now we have an almost full viewport width image. If we look in the web inspector, we\'92ll see that the body has 8px of margin set all the way around it, which is a thing the browser will do by default. We can go and get rid of that, up at the top of the stylesheet, in the existing body command: \
\
body \{\
    margin:0; \
\}\
\
Now we have a true full width header image, but it\'92s obviously cropped. The \'93cover\'94 command will do that \'97 it will fill the whole available size but may crop parts of the image. \
\
Let\'92s try this as a 100vh element: \
\
header \{\
    height: 100vh; \
\}\
\
So this will give us a full page image regardless of the height of the viewport. \
\
If we want this to be the first thing we see on the page, can change it in the html (move menu down below other items) \
\
It\'92s also worth pointing out that this technique can be used with items that aren\'92t just a background image, if you want to have a pagination technique. To do that, let\'92s just comment out that menu entirely, and then let\'92s do some work with the \'93articles\'94 we have around our lorem ipsum text. \
\
What we can do first is to give each article a height: \
\
article \{\
    height: 100vh; \
\}\
\
Which will \'93paginate\'94 them, though they look odd in those spots. Let\'92s fix those up a bit: \
\
article \{\
    height: 100vh;\
    display: flex;\
\}\
\
article p \{\
    width: 400px; //this is arbitrary\
    height: 500px; //so is this\
    margin: auto; \
\}\
 \
and then we can put in alternating background colors for our \'93pages\'94: \
\
.article-2, .article-4 \{\
    background-color: yellow;\
\}\
\
\
\
}